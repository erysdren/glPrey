/* ****************************************************************************
 *
 * ANTI-CAPITALIST SOFTWARE LICENSE (v 1.4)
 *
 * Copyright Â© 2023 erysdren (it/they/she)
 *
 * This is anti-capitalist software, released for free use by individuals
 * and organizations that do not operate by capitalist principles.
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization (the "User") obtaining a copy of this software and
 * associated documentation files (the "Software"), to use, copy, modify,
 * merge, distribute, and/or sell copies of the Software, subject to the
 * following conditions:
 *
 *   1. The above copyright notice and this permission notice shall be
 *   included in all copies or modified versions of the Software.
 *
 *   2. The User is one of the following:
 *     a. An individual person, laboring for themselves
 *     b. A non-profit organization
 *     c. An educational institution
 *     d. An organization that seeks shared profit for all of its members,
 *     and allows non-members to set the cost of their labor
 *
 *   3. If the User is an organization with owners, then all owners are
 *   workers and all workers are owners with equal equity and/or equal vote.
 *
 *   4. If the User is an organization, then the User is not law enforcement
 *   or military, or working for or under either.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT EXPRESS OR IMPLIED WARRANTY OF
 * ANY KIND, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ************************************************************************* */

/*
 *
 * headers
 *
 */

/* std */
#include <stdint.h>

/*
 *
 * keyboard scancodes
 *
 */

#if SHIM_SDL2

#include <SDL2/SDL.h>

#define SHIM_PLATFORM_STRING SDL_GetRevision()

enum
{
	SHIM_KEY_ESCAPE = SDL_SCANCODE_ESCAPE,
	SHIM_KEY_1 = SDL_SCANCODE_1,
	SHIM_KEY_2 = SDL_SCANCODE_2,
	SHIM_KEY_3 = SDL_SCANCODE_3,
	SHIM_KEY_4 = SDL_SCANCODE_4,
	SHIM_KEY_5 = SDL_SCANCODE_5,
	SHIM_KEY_6 = SDL_SCANCODE_6,
	SHIM_KEY_7 = SDL_SCANCODE_7,
	SHIM_KEY_8 = SDL_SCANCODE_8,
	SHIM_KEY_9 = SDL_SCANCODE_9,
	SHIM_KEY_0 = SDL_SCANCODE_0,
	SHIM_KEY_MINUS = SDL_SCANCODE_MINUS,
	SHIM_KEY_EQUALS = SDL_SCANCODE_EQUALS,
	SHIM_KEY_BACKSPACE = SDL_SCANCODE_BACKSPACE,
	SHIM_KEY_TAB = SDL_SCANCODE_TAB,
	SHIM_KEY_Q = SDL_SCANCODE_Q,
	SHIM_KEY_W = SDL_SCANCODE_W,
	SHIM_KEY_E = SDL_SCANCODE_E,
	SHIM_KEY_R = SDL_SCANCODE_R,
	SHIM_KEY_T = SDL_SCANCODE_T,
	SHIM_KEY_Y = SDL_SCANCODE_Y,
	SHIM_KEY_U = SDL_SCANCODE_U,
	SHIM_KEY_I = SDL_SCANCODE_I,
	SHIM_KEY_O = SDL_SCANCODE_O,
	SHIM_KEY_P = SDL_SCANCODE_P,
	SHIM_KEY_LEFTBRACKET = SDL_SCANCODE_LEFTBRACKET,
	SHIM_KEY_RIGHTBRACKET = SDL_SCANCODE_RIGHTBRACKET,
	SHIM_KEY_ENTER = SDL_SCANCODE_RETURN,
	SHIM_KEY_CONTROL = SDL_SCANCODE_LCTRL,
	SHIM_KEY_A = SDL_SCANCODE_A,
	SHIM_KEY_S = SDL_SCANCODE_S,
	SHIM_KEY_D = SDL_SCANCODE_D,
	SHIM_KEY_F = SDL_SCANCODE_F,
	SHIM_KEY_G = SDL_SCANCODE_G,
	SHIM_KEY_H = SDL_SCANCODE_H,
	SHIM_KEY_J = SDL_SCANCODE_J,
	SHIM_KEY_K = SDL_SCANCODE_K,
	SHIM_KEY_L = SDL_SCANCODE_L,
	SHIM_KEY_SEMICOLON = SDL_SCANCODE_SEMICOLON,
	SHIM_KEY_QUOTE = SDL_SCANCODE_APOSTROPHE,
	SHIM_KEY_TILDE = SDL_SCANCODE_GRAVE,
	SHIM_KEY_LSHIFT = SDL_SCANCODE_LSHIFT,
	SHIM_KEY_BACKSLASH = SDL_SCANCODE_BACKSLASH,
	SHIM_KEY_Z = SDL_SCANCODE_Z,
	SHIM_KEY_X = SDL_SCANCODE_X,
	SHIM_KEY_C = SDL_SCANCODE_C,
	SHIM_KEY_V = SDL_SCANCODE_V,
	SHIM_KEY_B = SDL_SCANCODE_B,
	SHIM_KEY_N = SDL_SCANCODE_N,
	SHIM_KEY_M = SDL_SCANCODE_M,
	SHIM_KEY_COMMA = SDL_SCANCODE_COMMA,
	SHIM_KEY_PERIOD = SDL_SCANCODE_PERIOD,
	SHIM_KEY_SLASH = SDL_SCANCODE_SLASH,
	SHIM_KEY_RSHIFT = SDL_SCANCODE_RSHIFT,
	SHIM_KEY_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY,
	SHIM_KEY_ALT = SDL_SCANCODE_LALT,
	SHIM_KEY_SPACE = SDL_SCANCODE_SPACE,
	SHIM_KEY_CAPSLOCK = SDL_SCANCODE_CAPSLOCK,
	SHIM_KEY_F1 = SDL_SCANCODE_F1,
	SHIM_KEY_F2 = SDL_SCANCODE_F2,
	SHIM_KEY_F3 = SDL_SCANCODE_F3,
	SHIM_KEY_F4 = SDL_SCANCODE_F4,
	SHIM_KEY_F5 = SDL_SCANCODE_F5,
	SHIM_KEY_F6 = SDL_SCANCODE_F6,
	SHIM_KEY_F7 = SDL_SCANCODE_F7,
	SHIM_KEY_F8 = SDL_SCANCODE_F8,
	SHIM_KEY_F9 = SDL_SCANCODE_F9,
	SHIM_KEY_F10 = SDL_SCANCODE_F10,
	SHIM_KEY_NUMLOCK = SDL_SCANCODE_NUMLOCKCLEAR,
	SHIM_KEY_SCROLLLOCK = SDL_SCANCODE_SCROLLLOCK,
	SHIM_KEY_HOME = SDL_SCANCODE_HOME,
	SHIM_KEY_UP = SDL_SCANCODE_UP,
	SHIM_KEY_PAGEUP = SDL_SCANCODE_PAGEUP,
	SHIM_KEY_LEFT = SDL_SCANCODE_LEFT,
	SHIM_KEY_RIGHT = SDL_SCANCODE_RIGHT,
	SHIM_KEY_PLUS = SDL_SCANCODE_KP_PLUS,
	SHIM_KEY_END = SDL_SCANCODE_END,
	SHIM_KEY_DOWN = SDL_SCANCODE_DOWN,
	SHIM_KEY_PAGEDOWN = SDL_SCANCODE_PAGEDOWN,
	SHIM_KEY_INSERT = SDL_SCANCODE_INSERT,
	SHIM_KEY_DELETE = SDL_SCANCODE_DELETE,
	SHIM_KEY_F11 = SDL_SCANCODE_F11,
	SHIM_KEY_F12 = SDL_SCANCODE_F12
};

#elif SHIM_SDL

#include <SDL/SDL.h>

#define SHIM_PLATFORM_STRING "SDL 1.2.15"

enum
{
	SHIM_KEY_ESCAPE = SDLK_ESCAPE,
	SHIM_KEY_1 = SDLK_1,
	SHIM_KEY_2 = SDLK_2,
	SHIM_KEY_3 = SDLK_3,
	SHIM_KEY_4 = SDLK_4,
	SHIM_KEY_5 = SDLK_5,
	SHIM_KEY_6 = SDLK_6,
	SHIM_KEY_7 = SDLK_7,
	SHIM_KEY_8 = SDLK_8,
	SHIM_KEY_9 = SDLK_9,
	SHIM_KEY_0 = SDLK_0,
	SHIM_KEY_MINUS = SDLK_MINUS,
	SHIM_KEY_EQUALS = SDLK_EQUALS,
	SHIM_KEY_BACKSPACE = SDLK_BACKSPACE,
	SHIM_KEY_TAB = SDLK_TAB,
	SHIM_KEY_Q = SDLK_q,
	SHIM_KEY_W = SDLK_w,
	SHIM_KEY_E = SDLK_e,
	SHIM_KEY_R = SDLK_r,
	SHIM_KEY_T = SDLK_t,
	SHIM_KEY_Y = SDLK_y,
	SHIM_KEY_U = SDLK_u,
	SHIM_KEY_I = SDLK_i,
	SHIM_KEY_O = SDLK_o,
	SHIM_KEY_P = SDLK_p,
	SHIM_KEY_LEFTBRACKET = SDLK_LEFTBRACKET,
	SHIM_KEY_RIGHTBRACKET = SDLK_RIGHTBRACKET,
	SHIM_KEY_ENTER = SDLK_RETURN,
	SHIM_KEY_CONTROL = SDLK_LCTRL,
	SHIM_KEY_A = SDLK_a,
	SHIM_KEY_S = SDLK_s,
	SHIM_KEY_D = SDLK_d,
	SHIM_KEY_F = SDLK_f,
	SHIM_KEY_G = SDLK_g,
	SHIM_KEY_H = SDLK_h,
	SHIM_KEY_J = SDLK_j,
	SHIM_KEY_K = SDLK_k,
	SHIM_KEY_L = SDLK_l,
	SHIM_KEY_SEMICOLON = SDLK_SEMICOLON,
	SHIM_KEY_QUOTE = SDLK_QUOTE,
	SHIM_KEY_TILDE = SDLK_BACKQUOTE,
	SHIM_KEY_LSHIFT = SDLK_LSHIFT,
	SHIM_KEY_BACKSLASH = SDLK_BACKSLASH,
	SHIM_KEY_Z = SDLK_z,
	SHIM_KEY_X = SDLK_x,
	SHIM_KEY_C = SDLK_c,
	SHIM_KEY_V = SDLK_v,
	SHIM_KEY_B = SDLK_b,
	SHIM_KEY_N = SDLK_n,
	SHIM_KEY_M = SDLK_m,
	SHIM_KEY_COMMA = SDLK_COMMA,
	SHIM_KEY_PERIOD = SDLK_PERIOD,
	SHIM_KEY_SLASH = SDLK_SLASH,
	SHIM_KEY_RSHIFT = SDLK_RSHIFT,
	SHIM_KEY_MULTIPLY = SDLK_KP_MULTIPLY,
	SHIM_KEY_ALT = SDLK_LALT,
	SHIM_KEY_SPACE = SDLK_SPACE,
	SHIM_KEY_CAPSLOCK = SDLK_CAPSLOCK,
	SHIM_KEY_F1 = SDLK_F1,
	SHIM_KEY_F2 = SDLK_F2,
	SHIM_KEY_F3 = SDLK_F3,
	SHIM_KEY_F4 = SDLK_F4,
	SHIM_KEY_F5 = SDLK_F5,
	SHIM_KEY_F6 = SDLK_F6,
	SHIM_KEY_F7 = SDLK_F7,
	SHIM_KEY_F8 = SDLK_F8,
	SHIM_KEY_F9 = SDLK_F9,
	SHIM_KEY_F10 = SDLK_F10,
	SHIM_KEY_NUMLOCK = SDLK_NUMLOCK,
	SHIM_KEY_SCROLLLOCK = SDLK_SCROLLOCK,
	SHIM_KEY_HOME = SDLK_HOME,
	SHIM_KEY_UP = SDLK_UP,
	SHIM_KEY_PAGEUP = SDLK_PAGEUP,
	SHIM_KEY_LEFT = SDLK_LEFT,
	SHIM_KEY_RIGHT = SDLK_RIGHT,
	SHIM_KEY_PLUS = SDLK_KP_PLUS,
	SHIM_KEY_END = SDLK_END,
	SHIM_KEY_DOWN = SDLK_DOWN,
	SHIM_KEY_PAGEDOWN = SDLK_PAGEDOWN,
	SHIM_KEY_INSERT = SDLK_INSERT,
	SHIM_KEY_DELETE = SDLK_DELETE,
	SHIM_KEY_F11 = SDLK_F11,
	SHIM_KEY_F12 = SDLK_F12
};

#elif SHIM_GLFW

#include <GLFW/glfw3.h>

#define SHIM_PLATFORM_STRING glfwGetVersionString()

enum
{
	SHIM_KEY_ESCAPE = GLFW_KEY_ESCAPE,
	SHIM_KEY_1 = GLFW_KEY_1,
	SHIM_KEY_2 = GLFW_KEY_2,
	SHIM_KEY_3 = GLFW_KEY_3,
	SHIM_KEY_4 = GLFW_KEY_4,
	SHIM_KEY_5 = GLFW_KEY_5,
	SHIM_KEY_6 = GLFW_KEY_6,
	SHIM_KEY_7 = GLFW_KEY_7,
	SHIM_KEY_8 = GLFW_KEY_8,
	SHIM_KEY_9 = GLFW_KEY_9,
	SHIM_KEY_0 = GLFW_KEY_0,
	SHIM_KEY_MINUS = GLFW_KEY_MINUS,
	SHIM_KEY_EQUALS = GLFW_KEY_EQUAL,
	SHIM_KEY_BACKSPACE = GLFW_KEY_BACKSPACE,
	SHIM_KEY_TAB = GLFW_KEY_TAB,
	SHIM_KEY_Q = GLFW_KEY_Q,
	SHIM_KEY_W = GLFW_KEY_W,
	SHIM_KEY_E = GLFW_KEY_E,
	SHIM_KEY_R = GLFW_KEY_R,
	SHIM_KEY_T = GLFW_KEY_T,
	SHIM_KEY_Y = GLFW_KEY_Y,
	SHIM_KEY_U = GLFW_KEY_U,
	SHIM_KEY_I = GLFW_KEY_I,
	SHIM_KEY_O = GLFW_KEY_O,
	SHIM_KEY_P = GLFW_KEY_P,
	SHIM_KEY_LEFTBRACKET = GLFW_KEY_LEFT_BRACKET,
	SHIM_KEY_RIGHTBRACKET = GLFW_KEY_RIGHT_BRACKET,
	SHIM_KEY_ENTER = GLFW_KEY_ENTER,
	SHIM_KEY_CONTROL = GLFW_KEY_LEFT_CONTROL,
	SHIM_KEY_A = GLFW_KEY_A,
	SHIM_KEY_S = GLFW_KEY_S,
	SHIM_KEY_D = GLFW_KEY_D,
	SHIM_KEY_F = GLFW_KEY_F,
	SHIM_KEY_G = GLFW_KEY_G,
	SHIM_KEY_H = GLFW_KEY_H,
	SHIM_KEY_J = GLFW_KEY_J,
	SHIM_KEY_K = GLFW_KEY_K,
	SHIM_KEY_L = GLFW_KEY_L,
	SHIM_KEY_SEMICOLON = GLFW_KEY_SEMICOLON,
	SHIM_KEY_QUOTE = GLFW_KEY_APOSTROPHE,
	SHIM_KEY_TILDE = GLFW_KEY_GRAVE_ACCENT,
	SHIM_KEY_LSHIFT = GLFW_KEY_LEFT_SHIFT,
	SHIM_KEY_BACKSLASH = GLFW_KEY_BACKSLASH,
	SHIM_KEY_Z = GLFW_KEY_Z,
	SHIM_KEY_X = GLFW_KEY_X,
	SHIM_KEY_C = GLFW_KEY_C,
	SHIM_KEY_V = GLFW_KEY_V,
	SHIM_KEY_B = GLFW_KEY_B,
	SHIM_KEY_N = GLFW_KEY_N,
	SHIM_KEY_M = GLFW_KEY_M,
	SHIM_KEY_COMMA = GLFW_KEY_COMMA,
	SHIM_KEY_PERIOD = GLFW_KEY_PERIOD,
	SHIM_KEY_SLASH = GLFW_KEY_SLASH,
	SHIM_KEY_RSHIFT = GLFW_KEY_RIGHT_SHIFT,
	SHIM_KEY_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
	SHIM_KEY_ALT = GLFW_KEY_LEFT_ALT,
	SHIM_KEY_SPACE = GLFW_KEY_SPACE,
	SHIM_KEY_CAPSLOCK = GLFW_KEY_CAPS_LOCK,
	SHIM_KEY_F1 = GLFW_KEY_F1,
	SHIM_KEY_F2 = GLFW_KEY_F2,
	SHIM_KEY_F3 = GLFW_KEY_F3,
	SHIM_KEY_F4 = GLFW_KEY_F4,
	SHIM_KEY_F5 = GLFW_KEY_F5,
	SHIM_KEY_F6 = GLFW_KEY_F6,
	SHIM_KEY_F7 = GLFW_KEY_F7,
	SHIM_KEY_F8 = GLFW_KEY_F8,
	SHIM_KEY_F9 = GLFW_KEY_F9,
	SHIM_KEY_F10 = GLFW_KEY_F10,
	SHIM_KEY_NUMLOCK = GLFW_KEY_NUM_LOCK,
	SHIM_KEY_SCROLLLOCK = GLFW_KEY_SCROLL_LOCK,
	SHIM_KEY_HOME = GLFW_KEY_HOME,
	SHIM_KEY_UP = GLFW_KEY_UP,
	SHIM_KEY_PAGEUP = GLFW_KEY_PAGE_UP,
	SHIM_KEY_LEFT = GLFW_KEY_LEFT,
	SHIM_KEY_RIGHT = GLFW_KEY_RIGHT,
	SHIM_KEY_PLUS = GLFW_KEY_KP_ADD,
	SHIM_KEY_END = GLFW_KEY_END,
	SHIM_KEY_DOWN = GLFW_KEY_DOWN,
	SHIM_KEY_PAGEDOWN = GLFW_KEY_PAGE_DOWN,
	SHIM_KEY_INSERT = GLFW_KEY_INSERT,
	SHIM_KEY_DELETE = GLFW_KEY_DELETE,
	SHIM_KEY_F11 = GLFW_KEY_F11,
	SHIM_KEY_F12 = GLFW_KEY_F12
};

#elif SHIM_DOS

#define SHIM_PLATFORM_STRING "DOS"

enum
{
	SHIM_KEY_ESCAPE = 0x01,
	SHIM_KEY_1 = 0x02,
	SHIM_KEY_2 = 0x03,
	SHIM_KEY_3 = 0x04,
	SHIM_KEY_4 = 0x05,
	SHIM_KEY_5 = 0x06,
	SHIM_KEY_6 = 0x07,
	SHIM_KEY_7 = 0x08,
	SHIM_KEY_8 = 0x09,
	SHIM_KEY_9 = 0x0A,
	SHIM_KEY_0 = 0x0B,
	SHIM_KEY_MINUS = 0x0C,
	SHIM_KEY_EQUALS = 0x0D,
	SHIM_KEY_BACKSPACE = 0x0E,
	SHIM_KEY_TAB = 0x0F,
	SHIM_KEY_Q = 0x10,
	SHIM_KEY_W = 0x11,
	SHIM_KEY_E = 0x12,
	SHIM_KEY_R = 0x13,
	SHIM_KEY_T = 0x14,
	SHIM_KEY_Y = 0x15,
	SHIM_KEY_U = 0x16,
	SHIM_KEY_I = 0x17,
	SHIM_KEY_O = 0x18,
	SHIM_KEY_P = 0x19,
	SHIM_KEY_LEFTBRACKET = 0x1A,
	SHIM_KEY_RIGHTBRACKET = 0x1B,
	SHIM_KEY_ENTER = 0x1C,
	SHIM_KEY_CONTROL = 0x1D,
	SHIM_KEY_A = 0x1E,
	SHIM_KEY_S = 0x1F,
	SHIM_KEY_D = 0x20,
	SHIM_KEY_F = 0x21,
	SHIM_KEY_G = 0x22,
	SHIM_KEY_H = 0x23,
	SHIM_KEY_J = 0x24,
	SHIM_KEY_K = 0x25,
	SHIM_KEY_L = 0x26,
	SHIM_KEY_SEMICOLON = 0x27,
	SHIM_KEY_QUOTE = 0x28,
	SHIM_KEY_TILDE = 0x29,
	SHIM_KEY_LSHIFT = 0x2A,
	SHIM_KEY_BACKSLASH = 0x2B,
	SHIM_KEY_Z = 0x2C,
	SHIM_KEY_X = 0x2D,
	SHIM_KEY_C = 0x2E,
	SHIM_KEY_V = 0x2F,
	SHIM_KEY_B = 0x30,
	SHIM_KEY_N = 0x31,
	SHIM_KEY_M = 0x32,
	SHIM_KEY_COMMA = 0x33,
	SHIM_KEY_PERIOD = 0x34,
	SHIM_KEY_SLASH = 0x35,
	SHIM_KEY_RSHIFT = 0x36,
	SHIM_KEY_MULTIPLY = 0x37,
	SHIM_KEY_ALT = 0x38,
	SHIM_KEY_SPACE = 0x39,
	SHIM_KEY_CAPSLOCK = 0x3A,
	SHIM_KEY_F1 = 0x3B,
	SHIM_KEY_F2 = 0x3C,
	SHIM_KEY_F3 = 0x3D,
	SHIM_KEY_F4 = 0x3E,
	SHIM_KEY_F5 = 0x3F,
	SHIM_KEY_F6 = 0x40,
	SHIM_KEY_F7 = 0x41,
	SHIM_KEY_F8 = 0x42,
	SHIM_KEY_F9 = 0x43,
	SHIM_KEY_F10 = 0x44,
	SHIM_KEY_NUMLOCK = 0x45,
	SHIM_KEY_SCROLLLOCK = 0x46,
	SHIM_KEY_HOME = 0x47,
	SHIM_KEY_UP = 0x48,
	SHIM_KEY_PAGEUP = 0x49,
	SHIM_KEY_LEFT = 0x4B,
	SHIM_KEY_RIGHT = 0x4D,
	SHIM_KEY_PLUS = 0x4E,
	SHIM_KEY_END = 0x4F,
	SHIM_KEY_DOWN = 0x50,
	SHIM_KEY_PAGEDOWN = 0x51,
	SHIM_KEY_INSERT = 0x52,
	SHIM_KEY_DELETE = 0x53,
	SHIM_KEY_F11 = 0x57,
	SHIM_KEY_F12 = 0x58
};

#elif SHIM_FENSTER

#define SHIM_PLATFORM_STRING "Fenster"

#else

#define SHIM_PLATFORM_STRING "null"

/* this is just for IDEs to stop complaining */
enum
{
	SHIM_KEY_ESCAPE,
	SHIM_KEY_1,
	SHIM_KEY_2,
	SHIM_KEY_3,
	SHIM_KEY_4,
	SHIM_KEY_5,
	SHIM_KEY_6,
	SHIM_KEY_7,
	SHIM_KEY_8,
	SHIM_KEY_9,
	SHIM_KEY_0,
	SHIM_KEY_MINUS,
	SHIM_KEY_EQUALS,
	SHIM_KEY_BACKSPACE,
	SHIM_KEY_TAB,
	SHIM_KEY_Q,
	SHIM_KEY_W,
	SHIM_KEY_E,
	SHIM_KEY_R,
	SHIM_KEY_T,
	SHIM_KEY_Y,
	SHIM_KEY_U,
	SHIM_KEY_I,
	SHIM_KEY_O,
	SHIM_KEY_P,
	SHIM_KEY_LEFTBRACKET,
	SHIM_KEY_RIGHTBRACKET,
	SHIM_KEY_ENTER,
	SHIM_KEY_CONTROL,
	SHIM_KEY_A,
	SHIM_KEY_S,
	SHIM_KEY_D,
	SHIM_KEY_F,
	SHIM_KEY_G,
	SHIM_KEY_H,
	SHIM_KEY_J,
	SHIM_KEY_K,
	SHIM_KEY_L,
	SHIM_KEY_SEMICOLON,
	SHIM_KEY_QUOTE,
	SHIM_KEY_TILDE,
	SHIM_KEY_LSHIFT,
	SHIM_KEY_BACKSLASH,
	SHIM_KEY_Z,
	SHIM_KEY_X,
	SHIM_KEY_C,
	SHIM_KEY_V,
	SHIM_KEY_B,
	SHIM_KEY_N,
	SHIM_KEY_M,
	SHIM_KEY_COMMA,
	SHIM_KEY_PERIOD,
	SHIM_KEY_SLASH,
	SHIM_KEY_RSHIFT,
	SHIM_KEY_MULTIPLY,
	SHIM_KEY_ALT,
	SHIM_KEY_SPACE,
	SHIM_KEY_CAPSLOCK,
	SHIM_KEY_F1,
	SHIM_KEY_F2,
	SHIM_KEY_F3,
	SHIM_KEY_F4,
	SHIM_KEY_F5,
	SHIM_KEY_F6,
	SHIM_KEY_F7,
	SHIM_KEY_F8,
	SHIM_KEY_F9,
	SHIM_KEY_F10,
	SHIM_KEY_NUMLOCK,
	SHIM_KEY_SCROLLLOCK,
	SHIM_KEY_HOME,
	SHIM_KEY_UP,
	SHIM_KEY_PAGEUP,
	SHIM_KEY_LEFT,
	SHIM_KEY_RIGHT,
	SHIM_KEY_PLUS,
	SHIM_KEY_END,
	SHIM_KEY_DOWN,
	SHIM_KEY_PAGEDOWN,
	SHIM_KEY_INSERT,
	SHIM_KEY_DELETE,
	SHIM_KEY_F11,
	SHIM_KEY_F12
};

#endif

/* mouse masks */
enum
{
	SHIM_MOUSE_LEFT = 1 << 0,
	SHIM_MOUSE_RIGHT = 1 << 1,
	SHIM_MOUSE_MIDDLE = 1 << 2
};

/* true / false */
#define SHIM_FALSE 0
#define SHIM_TRUE 1

/* unused variable */
#define SHIM_UNUSED(x) (void)(x)

/*
 *
 * functions
 *
 */

/* open window or set video mode */
int shim_init(int w, int h, int bpp, const char *title);

/* shut down everything and quit immediately */
void shim_quit();

/* blit a pixel buffer to the screen */
void shim_blit(int w, int h, int bpp, void *pixels);

/* tell the shim to exit in the next main loop frame */
void shim_should_quit(int should_quit);

/* poll events, scan keyboard for changes, etc */
int shim_frame();

/* returns true if the key scancode is currently being pressed */
int shim_key_read(int sc);

/* read mouse into x, y, dx, dy. returns button mask */
int shim_mouse_read(int *x, int *y, int *dx, int *dy);

/* print error or show message box, and quit */
int shim_error(const char *s, ...);

/* return an allocated string. automatically freed with shim_quit() */
const char *shim_string(const char *s, ...);

/* return current ticks since init */
uint64_t shim_ticks();

/* return number of ticks in a second */
uint64_t shim_ticks_per_second();
